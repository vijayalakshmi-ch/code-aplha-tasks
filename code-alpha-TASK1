Frontend: HTML/CSS/JavaScript
a) index.html (Product Listing Page)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple E-Commerce Store</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>Product Listings</h1>
  
  <div id="products" class="product-list">
    <!-- Products will be injected here dynamically from backend -->
  </div>

  <h2>Shopping Cart</h2>
  <div id="cart" class="cart">
    <p>No items in cart</p>
  </div>

  <script src="cart.js"></script>
  <script>
    // Fetch products from backend
    fetch('http://localhost:3000/api/products')
      .then(response => response.json())
      .then(products => {
        const productList = document.getElementById('products');
        products.forEach(product => {
          productList.innerHTML += `
            <div class="product">
              <h3>${product.name}</h3>
              <p>Price: $${product.price}</p>
              <button onclick="addToCart('${product.id}', '${product.name}', ${product.price})">Add to Cart</button>
            </div>
          `;
        });
      });
  </script>
</body>
</html>
b) style.css (Basic Styling)
body {
  font-family: Arial, sans-serif;
}

h1, h2 {
  text-align: center;
}

.product-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

.product {
  border: 1px solid #ccc;
  padding: 20px;
  width: 200px;
  text-align: center;
}

.cart {
  margin: 20px;
  text-align: center;
}
cart.js (Cart Logic)
let cart = [];

function addToCart(id, name, price) {
  cart.push({ id, name, price });
  displayCart();
}

function displayCart() {
  const cartDiv = document.getElementById('cart');
  cartDiv.innerHTML = cart.length === 0 ? '<p>No items in cart</p>' : '';

  cart.forEach(item => {
    cartDiv.innerHTML += `
      <div>
        <p>${item.name} - $${item.price}</p>
      </div>
    `;
  });

  const total = cart.reduce((sum, item) => sum + item.price, 0);
  cartDiv.innerHTML += `<p>Total: $${total}</p>`;
}
2. Backend: Express.js
a) Initialize Project
mkdir backend
cd backend
npm init -y
npm install express sqlite3
b) app.js (Main Express Application)
const express = require('express');
const cors = require('cors');
const productRoutes = require('./routes/productRoutes');
const app = express();
const PORT = 3000;

// Middleware
app.use(cors()); // Allow cross-origin requests (for frontend)
app.use(express.json());

// Routes
app.use('/api/products', productRoutes);

// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
c) routes/productRoutes.js (Product API Routes)
const express = require('express');
const router = express.Router();
const { getProducts } = require('../models/Product');

// GET /api/products
router.get('/', async (req, res) => {
  try {
    const products = await getProducts();
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

module.exports = router;
d) models/Product.js (Product Model for Database Interaction)
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./database/store.db');

// Function to fetch products from the database
const getProducts = () => {
  return new Promise((resolve, reject) => {
    db.all('SELECT * FROM products', [], (err, rows) => {
      if (err) {
        return reject(err);
      }
      resolve(rows);
    });
  });
};

module.exports = { getProducts };
e) Setting Up SQLite Database
sqlite3 backend/database/store.db
CREATE TABLE products (
  id INTEGER PRIMARY KEY,
  name TEXT,
  price REAL
);

INSERT INTO products (name, price) VALUES
  ('Product 1', 19.99),
  ('Product 2', 29.99),
  ('Product 3', 49.99);
f) package.json (Backend Dependencies)
{
  "name": "ecommerce-store-backend",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "sqlite3": "^5.0.0",
    "cors": "^2.8.5"
  }
}
run the application
npm start
